The algorithm starts with an initial solution, the base critical path. Simulated annealing uses a "temp" variable to control the randomness of the search. Initially we set the temp to be high and as the algorithm runs the temp slowly decreases which convreges us onto an optimal solution. With our implementation we generate another critical path but swap out a random gate for a random variation and if the cost is better the new solution is immidiately accepted, if it is worse then it is only selected depending on the temp. Higher temps lead to a larger chance of "worse" solutions being picked. This probability decreases as the temperature decreases, allowing the algorithm to escape local optima early on but gradually converge to the best solution as the temperature decreases. The algorithm terminates once the temp falls below a specified threshold. By iteratively exploring and refining solutions while gradually reducing the temperature, simulated annealing can effectively optimize the critical path of the circuit, balancing between exploration and exploitation to find a near-optimal solution. Simulated annealing is a very flexible solution and it explores a wide range of solutions early in the search process and gradually focuses on promising regions as the temperature decreases. The behavior of simulated annealing can be controlled through parameters such as initial temperature, cooling rate, and termination threshold, allowing us to fine-tune the algorithm for this specific problem. However compared to more deterministic optimization algorithms it reaches the optimal solution considreably slower especially with problems with complex search spcaes such as this. Choosing the appropriate parameters is vital as well as a poor choice can drastically decrease the efficiency of the program. 
